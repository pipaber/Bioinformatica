[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Piero Palacios Bernuy",
    "section": "",
    "text": "English  Spanish\nThis blog is built with Quarto and deployed with Netlify. My blog posts are released under a Creative Commons Attribution-ShareAlike 4.0 International License\nIf my blog has helped you, you can buy me a coffee."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Piero Palacios Bernuy",
    "section": "Experience",
    "text": "Experience\nExperimental Designs | Statistical Data Analysis and Modeling | R | Python | Galaxy | High Performance Computing (HPC) | NGS data handling\nIn vitro culture of plants | Microbiology | Realtime PCR analysis | Genomic data analysis (DNA) | Transcriptomic analysis by RNA-Seq."
  },
  {
    "objectID": "about_es.html",
    "href": "about_es.html",
    "title": "Piero Palacios Bernuy",
    "section": "",
    "text": "English  Spanish\nEste blog está hecho con Quarto y desarrollado con Netlify. Los artículos de este blog son desarrollados bajo la licencia internacional Creative Commons Atribución-ShareAlike 4.0\nSi te ha sido de ayuda mi blog, puedes comprarme un ¡café!"
  },
  {
    "objectID": "about_es.html#experiencia",
    "href": "about_es.html#experiencia",
    "title": "Piero Palacios Bernuy",
    "section": "Experiencia",
    "text": "Experiencia\nDiseños experimentales | Análisis y modelamiento estadístico de datos | R | Python | Galaxy | High Performance Computing (HPC) | Manejos de datos NGS\nCultivo in vitro | Microbiología | Análisis por PCR en tiempo real | Análisis de datos genómicos (ADN) | Análisis transcriptómico de plantas por RNA-Seq."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bioinformatica",
    "section": "",
    "text": "Introducción a Genomic Ranges\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\nBioconductor\n\n\n\n\nUna pequeña introducción a los rangos genómicos\n\n\n\n\n\n\nJul 12, 2022\n\n\nPiero Palacios Bernuy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/bioconductor-basico/index.html",
    "href": "posts/bioconductor-basico/index.html",
    "title": "Bioconductor básico",
    "section": "",
    "text": "Mi nombre es Piero Palacios, y esta es la primera de una serie de publicaciones que se enfocarán en enseñar los paquetes básicos de Bioconductor para el análisis genómico. Puedes leer más acerca de mí en la sección: Acerca de mí.\nLo primero que puede pasar por tu mente es: ¿Y qué es Bioconductor? ¿Para qué me serviría aprender sobre Bioconductor?\nBueno, si eres biólogo o trabajas con datos biológicos créeme que te va a servir bastante.\nAhora bien, la página web de Bioconductor nos dice lo siguiente:\n“La misión del proyecto Bioconductor es desarrollar, apoyar y difundir software libre de código abierto que facilite el análisis riguroso y reproducible de datos de ensayos biológicos actuales y emergentes. Estamos dedicados a construir una comunidad diversa, colaborativa y acogedora de desarrolladores y científicos de datos.”\nDicho en otras palabras, Bioconductor es similar al repositorio de paquetes de R, con la diferencia de que es un repositorio de softwares creado para el análisis de datos biológicos con enfoque en la reproducibilidad del análisis.\nCabe resaltar que la reproducibilidad de resultados en biología es un reto y, tener softwares enfocados en ayudar a aliviar ese problema, es un gran avance para las ciencias biológicas.\nEn fin, como ya te habrás percatado por el título, este post es una pequeña introducción a los rangos genómicos asi que ¡vamos al asunto!"
  },
  {
    "objectID": "posts/bioconductor-basico/index.html#rangos-genómicos",
    "href": "posts/bioconductor-basico/index.html#rangos-genómicos",
    "title": "Bioconductor básico",
    "section": "Rangos genómicos",
    "text": "Rangos genómicos\nLos pares de bases del ADN son enumerados del 1 hasta un número grande (podría ser más de 3 millones dependiendo de la especie). Estas enumeraciones nos ayudan a situarnos en regiones genómicas de interés como genes, regiones promotoras, regiones no codificantes, etc.\nDicho esto, ya podemos definir qué es un rango genómico. Un rango genómico es simplemente una región del ADN delimitada por dos números enteros o “coordenadas genómicas” que son de un interés específico para el investigador.\nAhora bien, trabajaremos esta serie de artículos a los rangos genómicos con datos inventados y con datos provenientes de un experimento de precipitación de inmuno cromatina (ChIP-Seq). Esta técnica tiene por objetivo secuenciar regiones específicas del genoma que son sitios de unión de proteínas como factores de transcripción.\nLa pregunta siguiente sería: ¿Para qué nos sirve secuenciar éstas regiones? La respuesta dicha de manera resumida es: “depende”. Si lo sé, nada científico. Lo que sucede es que dependen del objetivo, por ejemplo: estudiar el cáncer de mama o efectos en el sabor del plátano. Para el caso del cáncer, es de interés encontrar a los genes cercanos a éstas regiones, ya que pueden ser motivo de tratamientos o cura. Es ahí donde entran los rangos genómicos al conocer la ubicación estas regiones cercanas a los genes.\nAntes de empezar a explorar los paquetes de Bioconductor, necesitamos instalarlos:\nBiocManager::install(\"IRanges\") BiocManager::install(\"GenomicRanges\") BiocManager::install(\"genomicsclass/ERBS\") install_github(\"genomicsclass/ph525x\")\nEn caso no tengas instalado Bioconductor, puedes instalarlo como lo mencionan en su página web: Instalar bioconductor\nHecho lo anterior, primero revisaremos el paquete IRanges el cual es la base del paquete GenomicRanges.\nPsdt: El material que se discutirá está inspirado en el libro online Data analysis for genomics de Rafael Irrizary y Michael Love. ¡Te recomiendo revisarlo!"
  },
  {
    "objectID": "posts/bioconductor-basico/index.html#paquete-iranges",
    "href": "posts/bioconductor-basico/index.html#paquete-iranges",
    "title": "Bioconductor básico",
    "section": "Paquete IRanges",
    "text": "Paquete IRanges\n\nlibrary(IRanges) # carguemos el paquete\n\nLa primera función que estudiaremos es IRanges(). La función tiene tres argumentos principales: inicio (start), fin (end) y ancho (width). Por ejemplo, si definimos un rango \\([8,14] = 8,9,10,11,12,13,14\\) este tendrá un ancho o width de siete números.\n\nrango<- IRanges(8,14)\nrango\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         8        14         7\n\n\nPodemos extraer información como el inicio, el final y el ancho:\n\nstart(rango)\n\n[1] 8\n\nend(rango)\n\n[1] 14\n\nwidth(rango)\n\n[1] 7\n\n\nTambién podemos definir varios rangos al mismo tiempo:\n\nIRanges(start = c(2,4,7),end = c(10,15,14))\n\nIRanges object with 3 ranges and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         2        10         9\n  [2]         4        15        12\n  [3]         7        14         8\n\n\n\nOperaciones intra-rangos\nLas operaciones intra-rangos funcionan sobre cada rango de manera independiente.Entre las operaciones intra-rangos podemos mencionar a narrow, shift, flank y resize. Existen otras operaciones intra-rangos que pueden verse en la ayuda ?intra-range-methods.\n\nlibrary(rafalib)\nmypar(7,1)\n\nnarrow(rango,start = 3) # encoge el rango desde el inicio\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]        10        14         5\n\nplotRanges(rango,xlim = c(1,18))\nplotRanges(narrow(rango,start = 3),xlim = c(1,18),col=\"midnightblue\")\n\nshift(rango,shift = -3) # mover el rango 3 pares de bases a la izquierda\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         5        11         7\n\nplotRanges(shift(rango,shift = -3),xlim = c(1,18),col=\"midnightblue\")\n\n\nflank(rango,width = 3,start = T,both = F) # rodea el rango con 3 pares de bases a partir del inicio\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         5         7         3\n\nplotRanges(flank(rango,width = 3,start = T,both = F),xlim = c(1,18),col=\"midnightblue\")\n\nflank(rango,width = 3,start = F,both = F) # rodea el rango con 3 pares de bases a partir del final\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]        15        17         3\n\nplotRanges(flank(rango,width = 3,start = F,both = F),xlim = c(1,18),col=\"midnightblue\")\n\nflank(rango,width = 3,start = T,both = T) # rodea el rango con 3 pares de bases para la izquierda y para la derecha a partir del inicio\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         5        10         6\n\nplotRanges(flank(rango,width = 3,start = T,both = T),xlim = c(1,18),col=\"midnightblue\")\n\nresize(rango,width = 1) # redimensiona el rango a una base.\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         8         8         1\n\nplotRanges(resize(rango,width = 1),xlim = c(1,18),col=\"midnightblue\")\n\n\n\n\n\n\nOperaciones inter-rangos\nA diferencia de las operaciones intra-rangos, las operaciones inter-rangos trabajan sobre un conjunto de rangos, y el resultado depende de todos los rangos.\nVeamos cómo funcionan:\n\nrangos<-IRanges(start = c(2,8,11,10),end = c(5,10,14,13))\n\nmypar(6,1)\n\nplotRanges(rangos,xlim = c(0,15))\n\nrange(rangos) # da el rango de inicio a fin de todos los rengos\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         2        14        13\n\nplotRanges(range(rangos),xlim = c(0,15),col=\"midnightblue\")\n\nIRanges::reduce(rangos) # colapsa los rangos sobrepuestos en uno solo\n\nIRanges object with 2 ranges and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         2         5         4\n  [2]         8        14         7\n\nplotRanges(IRanges::reduce(rangos),xlim = c(0,15),col=\"midnightblue\")\n\ngaps(rangos) # retorna el rango que no cubre ningún rango\n\nIRanges object with 1 range and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         6         7         2\n\nplotRanges(gaps(rangos),xlim = c(0,15),col=\"midnightblue\")\n\ndisjoin(rangos) # retorna el máximo número de rangos no sobrepuestos\n\nIRanges object with 5 ranges and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]         2         5         4\n  [2]         8         9         2\n  [3]        10        10         1\n  [4]        11        13         3\n  [5]        14        14         1\n\nplotRanges(disjoin(rangos),xlim = c(0,15),col=\"midnightblue\")\n\n\n\n\nAhora que comprendemos las funciones básicas del paquete IRanges, es momento de identificar en qué se diferencia un rango y un rango genómico."
  },
  {
    "objectID": "posts/bioconductor-basico/index.html#rangos-genómicos-1",
    "href": "posts/bioconductor-basico/index.html#rangos-genómicos-1",
    "title": "Bioconductor básico",
    "section": "Rangos genómicos",
    "text": "Rangos genómicos\nLos rangos genómicos adicionalmente a los rangos que hemos visto, contienen dos partes esenciales de información: el nombre del cromosoma y la direccionalidad de la hebra de ADN (+, - o * so no se especifica).\n\nlibrary(GenomicRanges)\n\nEmpecemos por crear tres rangos genómicos pertenecientes al cromosoma 21 de la especie Homo sapiens. Supogamos que estos rangos pertenecen al genoma GRCh38.p14 el cual es la anotación telómero a telómero. Cabe resaltar que éstos rangos son inventados ya que no estamos usando una base de datos real.\n\ngr<-GRanges(\"chr21\",IRanges(start = c(5,12,14),end=c(25,31,40)),\n            strand = \"+\",seqlengths = c(chr21=100L))\n\ngenome(gr)<-\"GRCh38.p14\"\n\ngr\n\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21      5-25      +\n  [2]    chr21     12-31      +\n  [3]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\nseqnames(gr)\n\nfactor-Rle of length 3 with 1 run\n  Lengths:     3\n  Values : chr21\nLevels(1): chr21\n\nseqlengths(gr)\n\nchr21 \n  100 \n\n\nUsemos las funciones de rangos sobre el rango genómico creado.\n\nshift(gr,10)\n\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21     15-35      +\n  [2]    chr21     22-41      +\n  [3]    chr21     24-50      +\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\nshift(gr,80)\n\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21    85-105      +\n  [2]    chr21    92-111      +\n  [3]    chr21    94-120      +\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\n\nCuando usamos shift() con 80 pares de bases, los rangos sobrepasan la longitud del cromosoma que es 100. Para evitar que suceda esto usemos trim().\n\ntrim(shift(gr,80))\n\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21    85-100      +\n  [2]    chr21    92-100      +\n  [3]    chr21    94-100      +\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\n\nFinalmente, la clase GRanges noes permite adicionar columnas de metadata con la función mcols().\n\nmcols(gr)\n\nDataFrame with 3 rows and 0 columns\n\nmcols(gr)$value<-c(0.1,0.9,0.003)\n\ngr\n\nGRanges object with 3 ranges and 1 metadata column:\n      seqnames    ranges strand |     value\n         <Rle> <IRanges>  <Rle> | <numeric>\n  [1]    chr21      5-25      + |     0.100\n  [2]    chr21     12-31      + |     0.900\n  [3]    chr21     14-40      + |     0.003\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\n#Incluso puede borrarse metadata\n\nmcols(gr)$value<-NULL\n\ngr\n\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21      5-25      +\n  [2]    chr21     12-31      +\n  [3]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from GRCh38.p14 genome\n\n\nEn el siguiente artículo discutiremos más sobre la clase GRanges. Veremos la clase GRangesList donde formaremos listas de rangos genómicos, operaciones sobre estas listas, aplicaciones en datos reales de ChIP-Seq y le daremos sentido biológico a las operaciones de la clase IRanges."
  }
]