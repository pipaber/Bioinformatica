{
  "hash": "1aa64bf9f59cbbc0b963cd90067470cd",
  "result": {
    "markdown": "---\ntitle: \"Bioconductor básico\"\nsubtitle: \"Genomic Ranges\"\nauthor: \"Piero Palacios Bernuy\"\ndescription: \"Más sobre rangos genómicos y aplicaciones\"\ndate: \"2022-07-28\"\ntoc: true\ncategories: [news, code, analysis, Bioconductor]\nimage: \"babyyoda.jpg\"\n---\n\n\n\n\n## ¡Bienvenidos!\n\nMi nombre es Piero Palacios, y esta es la segunda parte de una serie de publicaciones que se enfocarán en enseñar el uso de rangos genómicos en R. Puedes leer más acerca de mí en la sección: [Acerca de mí](/about.qmd).\n\nEn el [artículo anterior](/posts/bioconductor-basico/index.qmd) aprendimos sobre la clase *IRanges*, definimos que es un rango genómico, vimos cómo crear uno y aplicamos operaciones simples sobre éstos.\n\nLo siguiente es aprender sobre la clase *GRangeList* así que empecemos.\n\n## Listas de rangos genónimos\n\nAntes de empezar con los códigos, es momento de darle más contexto biológico a los rangos genómicos. Como hemos visto, un rango genómico es la coordenada de una **secuencia** de interés dentro del genoma.\n\nSi estas secuencias de interés son genes, es mucho más útil usar listas de rangos genómicos debido a que se pueden representar, de manera ordenada, grupos de interés dentro de cada gen; por ejemplo: listas de genes y dentro de cada gen, un objeto del tipo rango genómico en el cual están los exones.\n\n[![](exones.png){fig-align=\"left\"}                                           ](http://www.biologia.arizona.edu/molecular_bio/problem_sets/mol_genetics_of_eukaryotes/08t.html)\n\nVeamos un ejemplo para entender a qué nos referimos con grupos de interés dentro de cada gen.\n\nPrimero creemos dos rangos genómicos:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_5e2ac5e8ecd25f39a111e6cd26c4f6bb'}\n\n```{.r .cell-code}\nlibrary(GenomicRanges)\ngr1<-GRanges(\"chr21\",IRanges(start = c(5,12,14),end=c(25,31,40)),\n            strand = \"+\",seqlengths = c(chr21=100L))\ngr2<-GRanges(\"chr21\",IRanges(start = c(27,30),end=c(40,60)),\n            strand = \"+\",seqlengths = c(chr21=100L))\n\ngrl<-GRangesList(gr1,gr2)\ngrl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRangesList object of length 2:\n[[1]]\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21      5-25      +\n  [2]    chr21     12-31      +\n  [3]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n[[2]]\nGRanges object with 2 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21     27-40      +\n  [2]    chr21     30-60      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n```\n:::\n:::\n\n\nPodemos entender a `grl` como una lista de dos **genes** o  dos **transcriptos**, y dentro de cada gen o transcripto tenemos diferente cantidad de exones.\n\nSe puede ver la longitud de la lista, la cantidad de elementos dentro de cada elemento de la lista e incluso podemos escoger solo ver un elemento de la lista.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_85a7468c20dc2c4ff8e231566c576dc6'}\n\n```{.r .cell-code}\nlength(grl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nelementNROWS(grl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2\n```\n:::\n\n```{.r .cell-code}\ngrl[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21      5-25      +\n  [2]    chr21     12-31      +\n  [3]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n```\n:::\n:::\n\n\nTambién se puede agregar columnas de metadatos:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_8afeffd403e01dad76c0fb2852ce17f8'}\n\n```{.r .cell-code}\nmcols(grl)$values<-c(4,5)\n\ngrl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRangesList object of length 2:\n[[1]]\nGRanges object with 3 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21      5-25      +\n  [2]    chr21     12-31      +\n  [3]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n[[2]]\nGRanges object with 2 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21     27-40      +\n  [2]    chr21     30-60      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n```\n:::\n:::\n\n\nSin embargo, al escribir el objeto `grl` en la consola no muestra los metadatos. La forma correcta de verlos es usando la función `mcols()`.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_6e5665567385a1ade697d5357afbdde5'}\n\n```{.r .cell-code}\nmcols(grl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 2 rows and 1 column\n     values\n  <numeric>\n1         4\n2         5\n```\n:::\n:::\n\n\nUna vez creados conjuntos de rangos genómicos o de listas de rangos genómicos, podría nacer esta pregunta: ¿Tienen rangos que se solapan?\n\nPara esta pregunta tenemos una función llamada `findOverlaps()`, que como dice el nombre, encuentra las secuencias que se solapan entre dos rangos o listas genómicas.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_ca5e8fabee078116ca14edda966f78f5'}\n\n```{.r .cell-code}\nov<-findOverlaps(gr1,gr2)\nov\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHits object with 4 hits and 0 metadata columns:\n      queryHits subjectHits\n      <integer>   <integer>\n  [1]         2           1\n  [2]         2           2\n  [3]         3           1\n  [4]         3           2\n  -------\n  queryLength: 3 / subjectLength: 2\n```\n:::\n:::\n\nLo que nos dice el objeto `ov` es por ejemplo: el segundo rango de `gr1` se solapa con el primer rango de `gr2`.\n\nOtra forma de hacer esta operación es con `%over%`. Esta operación nos retorna resultados lógicos del tipo `TRUE` o `FALSE` para el primer rango.\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_371b876407f3d06dfd7d0ab80bd8fd07'}\n\n```{.r .cell-code}\ngr1 %over% gr2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE\n```\n:::\n:::\n\nEstos resultados lógicos nos permiten filtrar los rangos que se solapan de la siguiente manera:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_712ab2bdf1da5bddb1894dbdb0303127'}\n\n```{.r .cell-code}\ngr1[gr1 %over% gr2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 2 ranges and 0 metadata columns:\n      seqnames    ranges strand\n         <Rle> <IRanges>  <Rle>\n  [1]    chr21     12-31      +\n  [2]    chr21     14-40      +\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n```\n:::\n:::\n\n\nHasta el momento sabemos crear rangos genómicos ya sea individuales o en listas y aprendimos sobre operaciones que se les pueden hacer a estos rangos. Ahora usemos los que aprendimos hasta ahora en datos reales de ChIP-Seq extraídos de células mamarias usadas para estudiar el cáncer de mama.\n\n## Aplicación en datos reales\n\nPrimero carguemos los datos de dos líneas celulares usadas para estudiar sitios de unión de proteínas receptoras de estrógeno:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_0466fd22d0cc5513434bb90695b528d4'}\n\n```{.r .cell-code}\nlibrary(ERBS)\n\ndata(\"GM12878\")\ndata(\"HepG2\")\n```\n:::\n\n\nBien lo primero que podemos hacer es ver los metadatos y los rangos genómicos.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_968c11acff7118d7fd553d6fda3c1346'}\n\n```{.r .cell-code}\nmcols(HepG2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 303 rows and 7 columns\n         name     score       col signalValue    pValue      qValue      peak\n    <numeric> <integer> <logical>   <numeric> <numeric>   <numeric> <integer>\n1          NA         0        NA      58.251    75.899 6.14371e-72       195\n2          NA         0        NA      10.808    69.685 5.02806e-66       321\n3          NA         0        NA      17.103    54.311 7.93067e-51       930\n4          NA         0        NA      12.427    43.855 1.35976e-40       604\n5          NA         0        NA      10.850    40.977 7.33386e-38       492\n...       ...       ...       ...         ...       ...         ...       ...\n299        NA         0        NA       9.681    10.057 1.42334e-08       402\n300        NA         0        NA       7.929    10.047 1.44208e-08       197\n301        NA         0        NA       5.864     9.990 1.63892e-08       227\n302        NA         0        NA       5.660     9.948 1.79941e-08       211\n303        NA         0        NA      13.211     9.918 1.92180e-08       163\n```\n:::\n\n```{.r .cell-code}\ngranges(HepG2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 303 ranges and 0 metadata columns:\n        seqnames              ranges strand\n           <Rle>           <IRanges>  <Rle>\n    [1]     chr2   20335378-20335787      *\n    [2]    chr20       328285-329145      *\n    [3]     chr6 168135432-168136587      *\n    [4]    chr19     1244419-1245304      *\n    [5]    chr11   64071828-64073069      *\n    ...      ...                 ...    ...\n  [299]     chr4     1797182-1797852      *\n  [300]     chr1 110198573-110199126      *\n  [301]    chr17   17734052-17734469      *\n  [302]     chr1   48306453-48306908      *\n  [303]    chr12 123867207-123867554      *\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n:::\n\n\nTambién se pueden hacer análisis exploratorios, por ejemplo hacer un histograma de el ancho de los rangos genómicos y ver el valor de la mediana:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_6b7430eaa3a4e24a4aeb69466a4e0472'}\n\n```{.r .cell-code}\na<-width(granges(HepG2))\nmedian_width<-median(a)\nmedian_width\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 560\n```\n:::\n\n```{.r .cell-code}\nas_tibble(a)%>%\n  ggplot(aes(x=value))+\n  geom_histogram(fill=\"midnightblue\",color=\"white\",bins = 25)+\n  labs(title = element_text(\"Histograma del ancho de rangos genómicos\"),\n       x=\"Ancho de rangos genómicos\")+\n  theme(plot.title = element_text(hjust = 0.5,face = \"bold\"))+\n  geom_vline(xintercept = median_width,colour=\"red\",size=1.5,lty=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=1440}\n:::\n:::\n\n\nUsemos la función `findOverlaps()` para buscar a las secuencias consenso (en común) que tienen las dos líneas celulares:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_c61e180503e1e7c337b9fe748e3b2095'}\n\n```{.r .cell-code}\nconsenso<-findOverlaps(HepG2,GM12878)\nconsenso\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHits object with 75 hits and 0 metadata columns:\n       queryHits subjectHits\n       <integer>   <integer>\n   [1]         1          12\n   [2]         2          78\n   [3]         4         777\n   [4]         5           8\n   [5]         8          13\n   ...       ...         ...\n  [71]       285         621\n  [72]       287         174\n  [73]       291        1855\n  [74]       294         512\n  [75]       300         144\n  -------\n  queryLength: 303 / subjectLength: 1873\n```\n:::\n\n```{.r .cell-code}\nhepg2_consenso<-HepG2[queryHits(consenso)]\nhepg2_consenso\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 75 ranges and 7 metadata columns:\n       seqnames              ranges strand |      name     score       col\n          <Rle>           <IRanges>  <Rle> | <numeric> <integer> <logical>\n   [1]     chr2   20335378-20335787      * |        NA         0      <NA>\n   [2]    chr20       328285-329145      * |        NA         0      <NA>\n   [3]    chr19     1244419-1245304      * |        NA         0      <NA>\n   [4]    chr11   64071828-64073069      * |        NA         0      <NA>\n   [5]     chr2   16938364-16938840      * |        NA         0      <NA>\n   ...      ...                 ...    ... .       ...       ...       ...\n  [71]    chr12 118558730-118559158      * |        NA         0      <NA>\n  [72]     chr1   35331750-35332300      * |        NA         0      <NA>\n  [73]     chr1   26146200-26147004      * |        NA         0      <NA>\n  [74]     chr6   44224657-44225693      * |        NA         0      <NA>\n  [75]     chr1 110198573-110199126      * |        NA         0      <NA>\n       signalValue    pValue      qValue      peak\n         <numeric> <numeric>   <numeric> <integer>\n   [1]      58.251    75.899 6.14371e-72       195\n   [2]      10.808    69.685 5.02806e-66       321\n   [3]      12.427    43.855 1.35976e-40       604\n   [4]      10.850    40.977 7.33386e-38       492\n   [5]      12.783    38.004 5.36029e-35       255\n   ...         ...       ...         ...       ...\n  [71]       8.292    10.294 8.59089e-09       195\n  [72]      10.458    10.233 9.81822e-09       341\n  [73]       5.742    10.176 1.10429e-08       337\n  [74]       3.525    10.102 1.29621e-08       838\n  [75]       7.929    10.047 1.44208e-08       197\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n:::\n\n\nSe puede ver que sólo tienen 75 secuencias en común de sitios de unión de proteínas receptoras de estrógeno.\n\nHemos encontrado regiones que se solapan entre las dos líneas celulares; sin embargo, también es de interés buscar regiones que estén cerca a los sitios de unión de las proteínas receptoras de estrógeno. ¿Por qué? Porque al ser dos líneas celulares diferentes, los sitios de unión también difieren. Veamos cómo hacer esto:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_65b079f28ad7f2ffbe21e7bb8dbe793f'}\n\n```{.r .cell-code}\ndist_prot<-distanceToNearest(HepG2,GM12878)\ndist_prot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHits object with 303 hits and 1 metadata column:\n        queryHits subjectHits |  distance\n        <integer>   <integer> | <integer>\n    [1]         1          12 |         0\n    [2]         2          78 |         0\n    [3]         3         438 |    567101\n    [4]         4         777 |         0\n    [5]         5           8 |         0\n    ...       ...         ... .       ...\n  [299]       299        1260 |     58550\n  [300]       300         144 |         0\n  [301]       301         619 |    237981\n  [302]       302        1163 |   1491857\n  [303]       303         546 |     43816\n  -------\n  queryLength: 303 / subjectLength: 1873\n```\n:::\n:::\n\nAdicionalmente a lo que vimos con la función `findOverlaps()`; la función `distanceToNearest()` calcula la distancia de los solapamientos y de las regiones que no se solapan. Como te habrás dado cuenta los solapamientos tienen distancia de **cero** y, son 303 regiones que pertencen a las 303 regiones de la línea celular HepG2.\n\n\n## Más datos reales\n\nAdicionalmente a los datos reales que hemos estado analizando, usaremos un objeto de anotación que contiene información sobre los genes del ser humano.\n\nLa pregunta que podrías hacerte ahora es, ¿y a qué te refieres con un objeto de anotación?\n\nBueno, una imagen habla más así que primero veámoslo y verás que se explica solo:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_c6ea1182ebadc7bdcdcb450b8f8fa4fe'}\n\n```{.r .cell-code}\nlibrary(Homo.sapiens)\n\nHomo.sapiens\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOrganismDb Object:\n# Includes GODb Object:  GO.db \n# With data about:  Gene Ontology \n# Includes OrgDb Object:  org.Hs.eg.db \n# Gene data about:  Homo sapiens \n# Taxonomy Id:  9606 \n# Includes TxDb Object:  TxDb.Hsapiens.UCSC.hg19.knownGene \n# Transcriptome data about:  Homo sapiens \n# Based on genome:  hg19 \n# The OrgDb gene id ENTREZID is mapped to the TxDb gene id GENEID .\n```\n:::\n:::\n\n\nComo podrás ver, este objeto de anotación tiene información **anotada** de: Genes, Transcriptos (TxDb), el genoma en el que está basado (hg19), el código taxonómico e información de ontología de los genes.\n\nPuedes pensar en toda esta información almacenada en formato de tablas, a las que puedes acceder usando funciones específicas.\n\nPara empezar, en este *post* usaremos tres funciones que nos permitirán acceder a la información del objeto de anotación: `genes()`,`exnosBy()` y `select()` que como puedes intuir, extraen información sobre genes y exnoes. En artículos futuros ahondaremos más sobre los objetos de anotación, su creación y de la *GRAN* utilidad que tienen para acceder a la información genómica de interés. \n\nEmpecemos viendo el resultado de la función `genes()`:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_ca4a74ea679033080365faeeb571ce4b'}\n\n```{.r .cell-code}\ngenes_hs <- genes(Homo.sapiens)\ngenes_hs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 23056 ranges and 1 metadata column:\n        seqnames              ranges strand |          GENEID\n           <Rle>           <IRanges>  <Rle> | <CharacterList>\n      1    chr19   58858172-58874214      - |               1\n     10     chr8   18248755-18258723      + |              10\n    100    chr20   43248163-43280376      - |             100\n   1000    chr18   25530930-25757445      - |            1000\n  10000     chr1 243651535-244006886      - |           10000\n    ...      ...                 ...    ... .             ...\n   9991     chr9 114979995-115095944      - |            9991\n   9992    chr21   35736323-35743440      + |            9992\n   9993    chr22   19023795-19109967      - |            9993\n   9994     chr6   90539619-90584155      + |            9994\n   9997    chr22   50961997-50964905      - |            9997\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n\n```{.r .cell-code}\nlength(genes_hs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23056\n```\n:::\n:::\n\nAhora puedes ver mucho más el por qué de la utilidad de los rangos genómicos. La anotación h19 del *Homo sapiens* cuenta con 23056 genes; específicamente podemos ver en qupe cromosoma se encuentran, sus coordenadas genómicas, el sentido en el que se encuentra y el código de identificación que poseen.\n\nTambién podemos ver a los exones por gen:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_23141033a7683cb586c92663af8b3a64'}\n\n```{.r .cell-code}\nexonsBy(Homo.sapiens,by = \"gene\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRangesList object of length 23459:\n$`1`\nGRanges object with 15 ranges and 2 metadata columns:\n       seqnames            ranges strand |   exon_id   exon_name\n          <Rle>         <IRanges>  <Rle> | <integer> <character>\n   [1]    chr19 58858172-58858395      - |    250809        <NA>\n   [2]    chr19 58858719-58859006      - |    250810        <NA>\n   [3]    chr19 58859832-58860494      - |    250811        <NA>\n   [4]    chr19 58860934-58862017      - |    250812        <NA>\n   [5]    chr19 58861736-58862017      - |    250813        <NA>\n   ...      ...               ...    ... .       ...         ...\n  [11]    chr19 58868951-58869015      - |    250821        <NA>\n  [12]    chr19 58869318-58869652      - |    250822        <NA>\n  [13]    chr19 58869855-58869951      - |    250823        <NA>\n  [14]    chr19 58870563-58870689      - |    250824        <NA>\n  [15]    chr19 58874043-58874214      - |    250825        <NA>\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`10`\nGRanges object with 2 ranges and 2 metadata columns:\n      seqnames            ranges strand |   exon_id   exon_name\n         <Rle>         <IRanges>  <Rle> | <integer> <character>\n  [1]     chr8 18248755-18248855      + |    113603        <NA>\n  [2]     chr8 18257508-18258723      + |    113604        <NA>\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n...\n<23457 more elements>\n```\n:::\n:::\n\n\nHagamos otro histograma del ancho de los rangos genómicos, pero esta vez a los genes del humano.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-16_6bc94d7fa4257b8d5a779ff72075536c'}\n\n```{.r .cell-code}\na<-width(genes_hs)\nmedian_width<-median(a)\nmedian_width\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20115.5\n```\n:::\n\n```{.r .cell-code}\nas_tibble(a)%>%\n  ggplot(aes(x=value))+\n  geom_histogram(fill=\"midnightblue\",color=\"white\")+\n  labs(title = element_text(\"Histograma del ancho de rangos genómicos\"),\n       x=\"Ancho de rangos genómicos\")+\n  theme(plot.title = element_text(hjust = 0.5,face = \"bold\"))+\n  geom_vline(xintercept = median_width,colour=\"red\",size=1.5,lty=2)+\n  geom_vline(xintercept = median_width,colour=\"red\",size=1.5,lty=2)+\n  coord_cartesian(xlim = c(0,2.5e6))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n\nFinalmente, la siguiente pregunta es, ¿y como relaciono los genes del ser humano con los datos de ChIP-Seq?\n\nLa respuesta es simple, usando las funciones de solapamiento o similares. Puedes aprender más de ellas en la ayuda: `?distanceToNearest`.\n\nPara demostrar el uso de éstas funciones sobre el genoma humano primero encontremos los sitios de inicio de la transcripción de los genes con una de las funciones de rangos genómicos: `resize()`.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_be88fbfcd9d2ead632927f6e65f9fdbb'}\n\n```{.r .cell-code}\nsit<-resize(genes_hs,1)\nsit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 23056 ranges and 1 metadata column:\n        seqnames    ranges strand |          GENEID\n           <Rle> <IRanges>  <Rle> | <CharacterList>\n      1    chr19  58874214      - |               1\n     10     chr8  18248755      + |              10\n    100    chr20  43280376      - |             100\n   1000    chr18  25757445      - |            1000\n  10000     chr1 244006886      - |           10000\n    ...      ...       ...    ... .             ...\n   9991     chr9 115095944      - |            9991\n   9992    chr21  35736323      + |            9992\n   9993    chr22  19109967      - |            9993\n   9994     chr6  90539619      + |            9994\n   9997    chr22  50964905      - |            9997\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n:::\n\nEs importante recordar que estas funciones dependen de la dirección en la que los genes se encuentran en la hebra doble del ADN.\n\nBien, hecho esto lo que sigue es: buscar a las regiones de unión de las proteinas receptoras de estrógeno que estén cerca a genes.\n\n¿Cómo hacemos esto? Con la función `nearest()`.\n\nEnfoquémonos en las secuencias consenso de las dos líneas celulares. Estas ya la hallamos arriba y las guardamos como `hepg2_consenso`.\n\nEspecíficamente veamos a la cuarta región:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_5d5cc78ad6e793a0f7fd12a253d60e0f'}\n\n```{.r .cell-code}\nind <-nearest(granges(hepg2_consenso)[4],sit)\nind\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6316\n```\n:::\n:::\n\nLa cuarta región está cerca al gen 6316. Filtremos a este gen:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-19_f45eb3d1211a8233c743c383d512e1a0'}\n\n```{.r .cell-code}\nsit[ind]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 1 range and 1 metadata column:\n       seqnames    ranges strand |          GENEID\n          <Rle> <IRanges>  <Rle> | <CharacterList>\n  2101    chr11  64073044      + |            2101\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n:::\n\n\nPodemos ver que está en el cromosoma 11 y tiene el id del gen es 2101.\n\nAhora, ¿cómo averiguamos el nombre y símbolo del gen? Bueno esto es sencillo debido a que el objeto de anotación cuenta con esta información. Veamos cómo obtener el nombre y símbolo del gen:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-20_2887e4111b3f8a3e5f15645b4b9cd2c7'}\n\n```{.r .cell-code}\n#Extraemos el código de identificación\ngen_de_interés<-as.character(mcols(sit)$GENEID[ind])\n\nselect(Homo.sapiens,keys = gen_de_interés,keytype = \"GENEID\",columns = c(\"SYMBOL\",\"GENENAME\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  GENEID                        GENENAME SYMBOL\n1   2101 estrogen related receptor alpha  ESRRA\n```\n:::\n:::\n\n\nPodemos ver que es un gen que tiene relación con la recepción de estrógeno, y ¡es lo que los investigadores buscaban al realizar el experimento de ChIP-Seq!\n\nEn el siguiente artículo discutiremos el manejo de secuencias de ADN como obtener el contenido de guanina-citocina, y cómo obtener secuencias específicas de rangos genómicos; por ejemplo: obtener la secuencia de un gen de interés.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}